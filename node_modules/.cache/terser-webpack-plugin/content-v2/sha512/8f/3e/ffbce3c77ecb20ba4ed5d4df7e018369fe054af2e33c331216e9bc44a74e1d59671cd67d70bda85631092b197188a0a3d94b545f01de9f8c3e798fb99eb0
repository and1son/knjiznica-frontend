{"map":"{\"version\":3,\"sources\":[\"/home/andi/Documents/Code/knjiznica2/react-frontend/src/App.js\",\"/home/andi/Documents/Code/knjiznica2/react-frontend/src/Knjigasifra.js\",\"/home/andi/Documents/Code/knjiznica2/react-frontend/src/serviceWorker.js\",\"/home/andi/Documents/Code/knjiznica2/react-frontend/src/index.js\",\"/home/andi/Documents/Code/knjiznica2/react-frontend/node_modules/file-loader/dist/cjs.js??ref--6-oneOf-7!/home/andi/Documents/Code/knjiznica2/react-frontend/src/logo.svg\"],\"names\":[\"App\",\"props\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"state\",\"knjiga\",\"fetch\",\"then\",\"response\",\"json\",\"findresponse\",\"console\",\"log\",\"setState\",\"react_default\",\"a\",\"createElement\",\"map\",\"naslov\",\"Component\",\"Knjigasifra\",\"className\",\"src\",\"logo\",\"alt\",\"window\",\"Boolean\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"src_Knjigasifra\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\",\"module\",\"exports\",\"__webpack_require__\",\"p\"],\"mappings\":\"yOAiCeA,qBA5Bb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAAEC,OAAQ,IAEvBC,MAAM,gCACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAACG,GAELC,QAAQC,IAAIF,EAAaL,UAE1BE,KAAK,SAAAF,GAAM,OAAKR,EAAKgB,SAAS,CAACR,OAAAA,MAVjBR,wEAcjB,OACEiB,EAAAC,EAAAC,cAAA,MAAA,KACAF,EAAAC,EAAAC,cAAA,KAAA,KAEIhB,KAAKI,MAAMC,OAAOY,IAAI,SAAAZ,GAAM,OAC1BS,EAAAC,EAAAC,cAAA,KAAA,KACEF,EAAAC,EAAAC,cAAA,KAAA,KAAKX,EAAOa,oBArBRC,EAAAA,YCWHC,mLAXX,OACEN,EAAAC,EAAAC,cAAA,MAAA,CAAKK,UAAU,eACbP,EAAAC,EAAAC,cAAA,SAAA,CAAQK,UAAU,sBAChBP,EAAAC,EAAAC,cAAA,MAAA,CAAKM,IAAKC,EAAAA,EAAMF,UAAU,mBAAmBG,IAAI,SACjDV,EAAAC,EAAAC,cAAA,IAAA,KAAA,kBAAmBS,OAAOpB,OAA1B,cANgBc,EAAAA,WCUNO,QACW,cAA7BD,OAAOE,SAASC,UAEe,UAA7BH,OAAOE,SAASC,UAEhBH,OAAOE,SAASC,SAASC,MACvB,2DCVNC,EAAAA,EAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SACjDJ,EAAAA,EAASC,OAAOjB,EAAAC,EAAAC,cAACmB,EAAD,MAAiBF,SAASC,eAAe,UDwHnD,kBAAmBE,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB\",\"sourcesContent\":[\"import React, { Component } from 'react';\\nimport logo from './logo.svg';\\nimport './App.css';\\n\\nclass App extends Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = { knjiga: [] };\\n\\n    fetch('http://localhost:5000/knjiga')\\n      .then(response => response.json())\\n      .then((findresponse)=>\\n      {\\n        console.log(findresponse.knjiga)\\n      })\\n      .then(knjiga => (this.setState({knjiga})))\\n\\n  }\\n  render() {\\n    return (\\n      <div>\\n      <ul>\\n        {\\n          this.state.knjiga.map(knjiga => \\n            <li>\\n              <h2>{knjiga.naslov}</h2>\\n          </li>\\n      )}      \\n      </ul>\\n    </div>)\\n  }\\n}\\n\\nexport default App;\\n\",\"import React, { Component } from 'react';\\nimport logo from './logo.svg';\\nclass Knjigasifra extends Component {\\n  render() {\\n    return (\\n      <div className=\\\"Knjigasifra\\\">\\n        <header className=\\\"Knjigasifra-header\\\">\\n          <img src={logo} className=\\\"Knjigasifra-logo\\\" alt=\\\"logo\\\" />\\n          <p> Moja knjiga = {window.knjiga} </p>\\n        </header>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default Knjigasifra;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport Knjigasifra from './Knjigasifra';\\n\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\nReactDOM.render(<Knjigasifra />, document.getElementById('root1'));\\n\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\",\"module.exports = __webpack_public_path__ + \\\"media/logo.5d5d9eef.svg\\\";\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{15:function(e,n,t){},16:function(e,n,t){},17:function(e,n,t){\"use strict\";t.r(n);var a=t(0),o=t.n(a),r=t(7),i=t.n(r),c=(t(15),t(1)),l=t(2),u=t(4),s=t(3),m=t(5),h=t(6),d=t.n(h),j=(t(16),function(e){function n(e){var t;return Object(c.a)(this,n),(t=Object(u.a)(this,Object(s.a)(n).call(this,e))).state={knjiga:[]},fetch(\"http://localhost:5000/knjiga\").then(function(e){return e.json()}).then(function(e){console.log(e.knjiga)}).then(function(e){return t.setState({knjiga:e})}),t}return Object(m.a)(n,e),Object(l.a)(n,[{key:\"render\",value:function(){return o.a.createElement(\"div\",null,o.a.createElement(\"ul\",null,this.state.knjiga.map(function(e){return o.a.createElement(\"li\",null,o.a.createElement(\"h2\",null,e.naslov))})))}}]),n}(a.Component)),f=function(e){function n(){return Object(c.a)(this,n),Object(u.a)(this,Object(s.a)(n).apply(this,arguments))}return Object(m.a)(n,e),Object(l.a)(n,[{key:\"render\",value:function(){return o.a.createElement(\"div\",{className:\"Knjigasifra\"},o.a.createElement(\"header\",{className:\"Knjigasifra-header\"},o.a.createElement(\"img\",{src:d.a,className:\"Knjigasifra-logo\",alt:\"logo\"}),o.a.createElement(\"p\",null,\" Moja knjiga = \",window.knjiga,\" \")))}}]),n}(a.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));i.a.render(o.a.createElement(j,null),document.getElementById(\"root\")),i.a.render(o.a.createElement(f,null),document.getElementById(\"root1\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},6:function(e,n,t){e.exports=t.p+\"media/logo.5d5d9eef.svg\"},9:function(e,n,t){e.exports=t(17)}},[[9,1,2]]]);","extractedComments":[]}