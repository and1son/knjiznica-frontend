{"map":"{\"version\":3,\"sources\":[\"/home/andi/Documents/Code/knjiznica2/react-frontend/src/App.js\",\"/home/andi/Documents/Code/knjiznica2/react-frontend/src/Knjigasifra.js\",\"/home/andi/Documents/Code/knjiznica2/react-frontend/src/serviceWorker.js\",\"/home/andi/Documents/Code/knjiznica2/react-frontend/src/index.js\",\"/home/andi/Documents/Code/knjiznica2/react-frontend/node_modules/file-loader/dist/cjs.js??ref--6-oneOf-7!/home/andi/Documents/Code/knjiznica2/react-frontend/src/logo.svg\"],\"names\":[\"App\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"state\",\"data\",\"_this2\",\"fetch\",\"then\",\"Response\",\"json\",\"findresponse\",\"setState\",\"knjiga\",\"react_default\",\"a\",\"createElement\",\"map\",\"key\",\"naslov\",\"Component\",\"Knjigasifra\",\"className\",\"src\",\"logo\",\"alt\",\"window\",\"Boolean\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"src_Knjigasifra\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\",\"module\",\"exports\",\"__webpack_require__\",\"p\"],\"mappings\":\"yOAuCeA,qBAlCb,SAAAA,IACC,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACGC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAM,CACTC,KAAK,IAHVR,mFAOD,IAAAS,EAAAN,KACEO,MAAM,gCACNC,KAAK,SAACC,GAAD,OAAYA,EAASC,SAC1BF,KAAK,SAACG,GAEJL,EAAKM,SAAS,CACZP,KAAKM,EAAaE,4CAMtB,OACEC,EAAAC,EAAAC,cAAA,MAAA,KAEIhB,KAAKI,MAAMC,KAAKY,IAAI,SAACJ,EAAOK,GAAR,OAClBJ,EAAAC,EAAAC,cAAA,MAAA,KACEF,EAAAC,EAAAC,cAAA,KAAA,KAAKH,EAAOM,mBA1BRC,EAAAA,YCWHC,mLAXX,OACEP,EAAAC,EAAAC,cAAA,MAAA,CAAKM,UAAU,eACbR,EAAAC,EAAAC,cAAA,SAAA,CAAQM,UAAU,sBAChBR,EAAAC,EAAAC,cAAA,MAAA,CAAKO,IAAKC,EAAAA,EAAMF,UAAU,mBAAmBG,IAAI,SACjDX,EAAAC,EAAAC,cAAA,IAAA,KAAA,kBAAmBU,OAAOb,OAA1B,cANgBO,EAAAA,WCUNO,QACW,cAA7BD,OAAOE,SAASC,UAEe,UAA7BH,OAAOE,SAASC,UAEhBH,OAAOE,SAASC,SAASC,MACvB,2DCVNC,EAAAA,EAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SACjDJ,EAAAA,EAASC,OAAOlB,EAAAC,EAAAC,cAACoB,EAAD,MAAiBF,SAASC,eAAe,UDwHnD,kBAAmBE,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB\",\"sourcesContent\":[\"import React, { Component } from 'react';\\nimport logo from './logo.svg';\\nimport './App.css';\\n\\nclass App extends Component {\\n  constructor()\\n   {\\n      super();\\n      this.state={\\n        data:[],\\n      }\\n    }\\n  componentDidMount()\\n  {\\n    fetch('http://localhost:5000/knjiga').\\n    then((Response)=>Response.json()).\\n    then((findresponse)=>\\n    {\\n      this.setState({\\n        data:findresponse.knjiga,\\n      })\\n    })\\n  }\\n  render() \\n  {\\n    return (\\n      <div>\\n        {\\n          this.state.data.map((knjiga,key) => \\n            <div>\\n              <h2>{knjiga.naslov}</h2>\\n          </div>\\n          )\\n      }\\n       </div>     \\n    )\\n  }\\n}\\n\\nexport default App;\\n\",\"import React, { Component } from 'react';\\nimport logo from './logo.svg';\\nclass Knjigasifra extends Component {\\n  render() {\\n    return (\\n      <div className=\\\"Knjigasifra\\\">\\n        <header className=\\\"Knjigasifra-header\\\">\\n          <img src={logo} className=\\\"Knjigasifra-logo\\\" alt=\\\"logo\\\" />\\n          <p> Moja knjiga = {window.knjiga} </p>\\n        </header>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default Knjigasifra;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport Knjigasifra from './Knjigasifra';\\n\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\nReactDOM.render(<Knjigasifra />, document.getElementById('root1'));\\n\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\",\"module.exports = __webpack_public_path__ + \\\"media/logo.5d5d9eef.svg\\\";\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{15:function(e,t,n){},16:function(e,t,n){},17:function(e,t,n){\"use strict\";n.r(t);var a=n(0),o=n.n(a),r=n(7),i=n.n(r),c=(n(15),n(1)),l=n(2),s=n(4),u=n(3),d=n(5),m=n(6),h=n.n(m),f=(n(16),function(e){function t(){var e;return Object(c.a)(this,t),(e=Object(s.a)(this,Object(u.a)(t).call(this))).state={data:[]},e}return Object(d.a)(t,e),Object(l.a)(t,[{key:\"componentDidMount\",value:function(){var e=this;fetch(\"http://localhost:5000/knjiga\").then(function(e){return e.json()}).then(function(t){e.setState({data:t.knjiga})})}},{key:\"render\",value:function(){return o.a.createElement(\"div\",null,this.state.data.map(function(e,t){return o.a.createElement(\"div\",null,o.a.createElement(\"h2\",null,e.naslov))}))}}]),t}(a.Component)),j=function(e){function t(){return Object(c.a)(this,t),Object(s.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(d.a)(t,e),Object(l.a)(t,[{key:\"render\",value:function(){return o.a.createElement(\"div\",{className:\"Knjigasifra\"},o.a.createElement(\"header\",{className:\"Knjigasifra-header\"},o.a.createElement(\"img\",{src:h.a,className:\"Knjigasifra-logo\",alt:\"logo\"}),o.a.createElement(\"p\",null,\" Moja knjiga = \",window.knjiga,\" \")))}}]),t}(a.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));i.a.render(o.a.createElement(f,null),document.getElementById(\"root\")),i.a.render(o.a.createElement(j,null),document.getElementById(\"root1\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},6:function(e,t,n){e.exports=n.p+\"media/logo.5d5d9eef.svg\"},9:function(e,t,n){e.exports=n(17)}},[[9,1,2]]]);","extractedComments":[]}